function _classPrivateMethodInitSpec(t,e){_checkPrivateRedeclaration(t,e),e.add(t)}function _classPrivateFieldInitSpec(t,e,i){_checkPrivateRedeclaration(t,e),e.set(t,i)}function _checkPrivateRedeclaration(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}function _classPrivateMethodGet(t,e,i){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return i}function _classPrivateFieldGet(t,e){return _classApplyDescriptorGet(t,_classExtractFieldDescriptor(t,e,"get"))}function _classApplyDescriptorGet(t,e){return e.get?e.get.call(t):e.value}function _classPrivateFieldSet(t,e,i){return _classApplyDescriptorSet(t,_classExtractFieldDescriptor(t,e,"set"),i),i}function _classExtractFieldDescriptor(t,e,i){if(!e.has(t))throw new TypeError("attempted to "+i+" private field on non-instance");return e.get(t)}function _classApplyDescriptorSet(t,e,i){if(e.set)e.set.call(t,i);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=i}}var _validationData=new WeakMap,_element=new WeakMap,_inputList=new WeakMap,_buttonElement=new WeakMap,_initClass=new WeakSet,_showInputError=new WeakSet,_hideInputError=new WeakSet,_checkInputValidity=new WeakSet,_disableButton=new WeakSet,_hasInvalidInput=new WeakSet,_toggleButtonState=new WeakSet,_checkInputList=new WeakSet,_setEventListeners=new WeakSet;export class FormValidator{constructor(t,e){return _classPrivateMethodInitSpec(this,_setEventListeners),_classPrivateMethodInitSpec(this,_checkInputList),_classPrivateMethodInitSpec(this,_toggleButtonState),_classPrivateMethodInitSpec(this,_hasInvalidInput),_classPrivateMethodInitSpec(this,_disableButton),_classPrivateMethodInitSpec(this,_checkInputValidity),_classPrivateMethodInitSpec(this,_hideInputError),_classPrivateMethodInitSpec(this,_showInputError),_classPrivateMethodInitSpec(this,_initClass),_classPrivateFieldInitSpec(this,_validationData,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_element,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_inputList,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_buttonElement,{writable:!0,value:void 0}),Object.keys(t).includes("formSelector")?Object.keys(t).includes("inputSelector")?Object.keys(t).includes("submitButtonSelector")?Object.keys(t).includes("inactiveButtonClass")?Object.keys(t).includes("inputErrorClass")?Object.keys(t).includes("errorClass")?void _classPrivateMethodGet(this,_initClass,_initClass2).call(this,t,e):(console.log("Ошибка ввода данных - 'errorClass' в классе 'FormValidator' не введено"),null):(console.log("Ошибка ввода данных - 'inputErrorClass' в классе 'FormValidator' не введено"),null):(console.log("Ошибка ввода данных - 'inactiveButtonClass' в классе 'FormValidator' не введено"),null):(console.log("Ошибка ввода данных - 'submitButtonSelector' в классе 'FormValidator' не введено"),null):(console.log("Ошибка ввода данных - 'inputSelector' в классе 'FormValidator' не введено"),null):(console.log("Ошибка ввода данных - 'formSelector' в классе 'FormValidator' не введено"),null)}resetValidation(){_classPrivateFieldGet(this,_inputList).forEach((t=>{_classPrivateMethodGet(this,_hideInputError,_hideInputError2).call(this,t)})),_classPrivateMethodGet(this,_disableButton,_disableButton2).call(this)}enableValidation(){_classPrivateMethodGet(this,_setEventListeners,_setEventListeners2).call(this)}}function _initClass2(t,e){_classPrivateFieldSet(this,_validationData,t),_classPrivateFieldSet(this,_element,e),_classPrivateFieldSet(this,_inputList,Array.from(_classPrivateFieldGet(this,_element).querySelectorAll(_classPrivateFieldGet(this,_validationData).inputSelector))),_classPrivateFieldSet(this,_buttonElement,_classPrivateFieldGet(this,_element).querySelector(_classPrivateFieldGet(this,_validationData).submitButtonSelector))}function _showInputError2(t,e){const i=_classPrivateFieldGet(this,_element).querySelector(`.${t.id}-error`);t.classList.add(_classPrivateFieldGet(this,_validationData).inputErrorClass),i.textContent=e,i.classList.add(_classPrivateFieldGet(this,_validationData).errorClass)}function _hideInputError2(t){const e=_classPrivateFieldGet(this,_element).querySelector(`.${t.id}-error`);t.classList.remove(_classPrivateFieldGet(this,_validationData).inputErrorClass),e.classList.remove(_classPrivateFieldGet(this,_validationData).errorClass),e.textContent=""}function _checkInputValidity2(t){t.validity.valid?_classPrivateMethodGet(this,_hideInputError,_hideInputError2).call(this,t):_classPrivateMethodGet(this,_showInputError,_showInputError2).call(this,t,t.validationMessage)}function _disableButton2(){_classPrivateFieldGet(this,_buttonElement).classList.add(_classPrivateFieldGet(this,_validationData).inactiveButtonClass),_classPrivateFieldGet(this,_buttonElement).disabled=!0}function _hasInvalidInput2(){return _classPrivateFieldGet(this,_inputList).some((t=>!t.validity.valid))}function _toggleButtonState2(){_classPrivateMethodGet(this,_hasInvalidInput,_hasInvalidInput2).call(this)?_classPrivateMethodGet(this,_disableButton,_disableButton2).call(this):(_classPrivateFieldGet(this,_buttonElement).classList.remove(_classPrivateFieldGet(this,_validationData).inactiveButtonClass),_classPrivateFieldGet(this,_buttonElement).disabled=!1)}function _checkInputList2(t){_classPrivateMethodGet(this,_checkInputValidity,_checkInputValidity2).call(this,t),_classPrivateMethodGet(this,_toggleButtonState,_toggleButtonState2).call(this)}function _setEventListeners2(){_classPrivateMethodGet(this,_toggleButtonState,_toggleButtonState2).call(this),_classPrivateFieldGet(this,_inputList).forEach((t=>{t.addEventListener("input",(()=>_classPrivateMethodGet(this,_checkInputList,_checkInputList2).call(this,t)))}))}